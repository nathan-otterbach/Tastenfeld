
Vorlage_Nathan_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000022e  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  0000022e  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  0000025d  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000026b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b18  00000000  00000000  0000029b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000720  00000000  00000000  00000db3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002fb  00000000  00000000  000014d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000017d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000022e  00000000  00000000  00001814  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001e2  00000000  00000000  00001a42  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001c24  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000001ac  000001ac  00000220  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c44  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.scan_tastatur 000000ca  0000008c  0000008c  00000100  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.display 0000000c  000001a0  000001a0  00000214  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.main    00000034  00000156  00000156  000001ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .progmemx.data.tastaturlayout 0000000c  00000080  00000080  000000f4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 18 .text.__dummy_fini 00000002  000001b4  000001b4  00000228  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_funcs_on_exit 00000002  000001b6  000001b6  0000022a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__dummy_simulator_exit 00000002  000001b8  000001b8  0000022c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.exit    00000016  0000018a  0000018a  000001fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text._Exit   00000004  000001b0  000001b0  00000224  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
   8:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
   c:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
  10:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
  14:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
  18:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
  1c:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
  20:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
  24:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
  28:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
  2c:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
  30:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
  34:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
  38:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
  3c:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
  40:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
  44:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
  48:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
  4c:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
  50:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
  54:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
  58:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
  5c:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
  60:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
  64:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 ab 00 	call	0x156	; 0x156 <main>
  78:	0c 94 c5 00 	jmp	0x18a	; 0x18a <exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

000001ac <__bad_interrupt>:
 1ac:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.scan_tastatur:

0000008c <scan_tastatur>:
 * Funktion: Durchläuft alle Zeilen/Spalten und erkennt gedrückte Tasten
 * Parameter: keine
 * Rückgabe: uint8_t - Tastenwert aus tastaturlayout oder 0xFF wenn keine Taste gedrückt
 */
uint8_t scan_tastatur(void) {
    for (uint8_t reihe = 0; reihe < 4; reihe++) {
  8c:	50 e0       	ldi	r21, 0x00	; 0
  8e:	5e c0       	rjmp	.+188    	; 0x14c <scan_tastatur+0xc0>
        // Alle Zeilen (PB0-PB3) auf HIGH setzen
        PORTB = 0x0F;
  90:	8f e0       	ldi	r24, 0x0F	; 15
  92:	85 b9       	out	0x05, r24	; 5
        // Aktuelle Zeile auf LOW setzen
        PORTB &= ~(1 << reihe);
  94:	25 b1       	in	r18, 0x05	; 5
  96:	65 2f       	mov	r22, r21
  98:	70 e0       	ldi	r23, 0x00	; 0
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	05 2e       	mov	r0, r21
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <scan_tastatur+0x1a>
  a2:	88 0f       	add	r24, r24
  a4:	99 1f       	adc	r25, r25
  a6:	0a 94       	dec	r0
  a8:	e2 f7       	brpl	.-8      	; 0xa2 <scan_tastatur+0x16>
  aa:	80 95       	com	r24
  ac:	82 23       	and	r24, r18
  ae:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b0:	21 e2       	ldi	r18, 0x21	; 33
  b2:	2a 95       	dec	r18
  b4:	f1 f7       	brne	.-4      	; 0xb2 <scan_tastatur+0x26>
  b6:	00 00       	nop
  
        _delay_us(5);
        
        // Spaltenstatus lesen (PD2-PD4)
        uint8_t spalten = PIND & 0x1C;
  b8:	49 b1       	in	r20, 0x09	; 9
  ba:	4c 71       	andi	r20, 0x1C	; 28
        for (uint8_t spalte = 0; spalte < 3; spalte++) {
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	42 c0       	rjmp	.+132    	; 0x144 <scan_tastatur+0xb8>
            // Spalten sind PD2-PD4
            uint8_t pin_spalte = spalte + 2;
  c0:	92 e0       	ldi	r25, 0x02	; 2
  c2:	98 0f       	add	r25, r24
            
            // Wenn Spalte LOW ist (Taste gedrückt)
            if (!(spalten & (1 << pin_spalte))) {
  c4:	e9 2f       	mov	r30, r25
  c6:	24 2f       	mov	r18, r20
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	09 2e       	mov	r0, r25
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <scan_tastatur+0x46>
  ce:	35 95       	asr	r19
  d0:	27 95       	ror	r18
  d2:	0a 94       	dec	r0
  d4:	e2 f7       	brpl	.-8      	; 0xce <scan_tastatur+0x42>
  d6:	20 fd       	sbrc	r18, 0
  d8:	34 c0       	rjmp	.+104    	; 0x142 <scan_tastatur+0xb6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	af e4       	ldi	r26, 0x4F	; 79
  dc:	b3 ec       	ldi	r27, 0xC3	; 195
  de:	11 97       	sbiw	r26, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <scan_tastatur+0x52>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <scan_tastatur+0x58>
  e4:	00 00       	nop
                _delay_ms(10);
				
                if (!(PIND & (1 << pin_spalte))) {
  e6:	29 b1       	in	r18, 0x09	; 9
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <scan_tastatur+0x64>
  ec:	35 95       	asr	r19
  ee:	27 95       	ror	r18
  f0:	9a 95       	dec	r25
  f2:	e2 f7       	brpl	.-8      	; 0xec <scan_tastatur+0x60>
  f4:	20 fd       	sbrc	r18, 0
  f6:	25 c0       	rjmp	.+74     	; 0x142 <scan_tastatur+0xb6>
  f8:	06 c0       	rjmp	.+12     	; 0x106 <scan_tastatur+0x7a>
  fa:	af e4       	ldi	r26, 0x4F	; 79
  fc:	b3 ec       	ldi	r27, 0xC3	; 195
  fe:	11 97       	sbiw	r26, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <scan_tastatur+0x72>
 102:	00 c0       	rjmp	.+0      	; 0x104 <scan_tastatur+0x78>
 104:	00 00       	nop
                    // Warten bis Taste losgelassen wird
                    while (!(PIND & (1 << pin_spalte))) {
 106:	29 b1       	in	r18, 0x09	; 9
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	0e 2e       	mov	r0, r30
 10c:	02 c0       	rjmp	.+4      	; 0x112 <scan_tastatur+0x86>
 10e:	35 95       	asr	r19
 110:	27 95       	ror	r18
 112:	0a 94       	dec	r0
 114:	e2 f7       	brpl	.-8      	; 0x10e <scan_tastatur+0x82>
 116:	20 ff       	sbrs	r18, 0
 118:	f0 cf       	rjmp	.-32     	; 0xfa <scan_tastatur+0x6e>
                        _delay_ms(10);
                    }
                    // Tastenwert zurückgeben
                    return tastaturlayout[reihe][spalte];
 11a:	9b 01       	movw	r18, r22
 11c:	22 0f       	add	r18, r18
 11e:	33 1f       	adc	r19, r19
 120:	62 0f       	add	r22, r18
 122:	73 1f       	adc	r23, r19
 124:	9b 01       	movw	r18, r22
 126:	28 0f       	add	r18, r24
 128:	31 1d       	adc	r19, r1
 12a:	c9 01       	movw	r24, r18
 12c:	09 2e       	mov	r0, r25
 12e:	00 0c       	add	r0, r0
 130:	aa 0b       	sbc	r26, r26
 132:	80 58       	subi	r24, 0x80	; 128
 134:	9f 4f       	sbci	r25, 0xFF	; 255
 136:	af 4f       	sbci	r26, 0xFF	; 255
 138:	fc 01       	movw	r30, r24
 13a:	84 91       	lpm	r24, Z
 13c:	a7 fd       	sbrc	r26, 7
 13e:	80 81       	ld	r24, Z
 140:	08 95       	ret
  
        _delay_us(5);
        
        // Spaltenstatus lesen (PD2-PD4)
        uint8_t spalten = PIND & 0x1C;
        for (uint8_t spalte = 0; spalte < 3; spalte++) {
 142:	8f 5f       	subi	r24, 0xFF	; 255
 144:	83 30       	cpi	r24, 0x03	; 3
 146:	08 f4       	brcc	.+2      	; 0x14a <scan_tastatur+0xbe>
 148:	bb cf       	rjmp	.-138    	; 0xc0 <scan_tastatur+0x34>
 * Funktion: Durchläuft alle Zeilen/Spalten und erkennt gedrückte Tasten
 * Parameter: keine
 * Rückgabe: uint8_t - Tastenwert aus tastaturlayout oder 0xFF wenn keine Taste gedrückt
 */
uint8_t scan_tastatur(void) {
    for (uint8_t reihe = 0; reihe < 4; reihe++) {
 14a:	5f 5f       	subi	r21, 0xFF	; 255
 14c:	54 30       	cpi	r21, 0x04	; 4
 14e:	08 f4       	brcc	.+2      	; 0x152 <scan_tastatur+0xc6>
 150:	9f cf       	rjmp	.-194    	; 0x90 <scan_tastatur+0x4>
            }
        }
    }
    
    // Keine Taste gedrückt
    return 0xFF;
 152:	8f ef       	ldi	r24, 0xFF	; 255
}
 154:	08 95       	ret

Disassembly of section .text.display:

000001a0 <display>:
 * Parameter: uint8_t wert - Anzuzeigender Wert
 * Rückgabe: keine
 */
void display(uint8_t wert) {
    // Untere 4 Bits von wert auf PC0-PC3 setzen, obere Bits von PORTC unverändert lassen
    PORTC = (PORTC & 0xF0) | (wert & 0x0F);
 1a0:	98 b1       	in	r25, 0x08	; 8
 1a2:	90 7f       	andi	r25, 0xF0	; 240
 1a4:	8f 70       	andi	r24, 0x0F	; 15
 1a6:	89 2b       	or	r24, r25
 1a8:	88 b9       	out	0x08, r24	; 8
 1aa:	08 95       	ret

Disassembly of section .text.main:

00000156 <main>:
 * Hauptprogramm
 */
int main(void) {
    // Port-Konfiguration
    // PB0-PB3 als Ausgänge (Zeilen)
    DDRB = 0x0F;
 156:	8f e0       	ldi	r24, 0x0F	; 15
 158:	84 b9       	out	0x04, r24	; 4
    // PC0-PC3 als Ausgänge (LEDs)
    DDRC = 0x0F;
 15a:	87 b9       	out	0x07, r24	; 7
    
    // PD2-PD4 als Eingänge (Spalten)
    DDRD &= ~0x1C;
 15c:	8a b1       	in	r24, 0x0a	; 10
 15e:	83 7e       	andi	r24, 0xE3	; 227
 160:	8a b9       	out	0x0a, r24	; 10
    // Pull-ups für Spalten aktivieren
    PORTD |= 0x1C;
 162:	8b b1       	in	r24, 0x0b	; 11
 164:	8c 61       	ori	r24, 0x1C	; 28
 166:	8b b9       	out	0x0b, r24	; 11
    uint8_t temp = 0xFF;
    
    // Hauptschleife
    while (1) {
        // Keypad scannen
        taste = scan_tastatur();
 168:	0e 94 46 00 	call	0x8c	; 0x8c <scan_tastatur>
        
        // Wenn neue Taste gedrückt
        if (taste != 0xFF && taste != temp) {
 16c:	8f 3f       	cpi	r24, 0xFF	; 255
 16e:	e1 f3       	breq	.-8      	; 0x168 <main+0x12>
 170:	d9 f3       	breq	.-10     	; 0x168 <main+0x12>
            // Wert auf LEDs anzeigen
            display(taste);
 172:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <display>
 176:	2f e7       	ldi	r18, 0x7F	; 127
 178:	8a e1       	ldi	r24, 0x1A	; 26
 17a:	96 e0       	ldi	r25, 0x06	; 6
 17c:	21 50       	subi	r18, 0x01	; 1
 17e:	80 40       	sbci	r24, 0x00	; 0
 180:	90 40       	sbci	r25, 0x00	; 0
 182:	e1 f7       	brne	.-8      	; 0x17c <main+0x26>
 184:	00 c0       	rjmp	.+0      	; 0x186 <main+0x30>
 186:	00 00       	nop
 188:	ef cf       	rjmp	.-34     	; 0x168 <main+0x12>

Disassembly of section .text.__dummy_fini:

000001b4 <_fini>:
 1b4:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000001b6 <__funcs_on_exit>:
 1b6:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000001b8 <__simulator_exit>:
 1b8:	08 95       	ret

Disassembly of section .text.exit:

0000018a <exit>:
 18a:	ec 01       	movw	r28, r24
 18c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <__funcs_on_exit>
 190:	0e 94 da 00 	call	0x1b4	; 0x1b4 <_fini>
 194:	ce 01       	movw	r24, r28
 196:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <__simulator_exit>
 19a:	ce 01       	movw	r24, r28
 19c:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <_Exit>

Disassembly of section .text._Exit:

000001b0 <_Exit>:
 1b0:	0e 94 3e 00 	call	0x7c	; 0x7c <_exit>
